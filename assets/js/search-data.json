{
  
    
        "post0": {
            "title": "Red noise",
            "content": "Hasselmann (as explained by Dommenget and Latif, 2000) . Hasselmann (1976) attempts to explain the mechanism of natural climate variabilty by dividing the climate system into a fast system and a slow system. The fast system could be the atmosphere, represented as white noise. The slower component is the ocean and is explained by the integration of white noise (AR-1). In this picture the ocean is merely a passive part of the climate system, which amplifies long-term variability, due to its large heat capacity, but dynamical processes in the ocean are not considered. . The resulting stochastic model of the SST variability is described by an autoregressive process of the first order, which is the simplest statistical model that can be applied to a stationary process. The stochastic climate model by Hasselmann is tehrefore often chosen as the null hypothesis of SST variability. . Slab ocean-atmosphere models can be regarded as a numerical realization of the null hypothesis (AR(1)-process) of Hasselmann&#39;s stochastic climate model. . The null hypothesis of SST variability in the midlatitudes, described by Hasselmann&#39;s stochastic climate model, assumes that the SST variability is well described by the integration of the atmospheric heat flux with the heat capacity of the ocean&#39;s mixed layer. . $ frac{d SST}{dT} = frac{1}{C_p rho_w d_{mix}}* F + Delta T_c$ . $C_p$ = specifc heat of sea water . $ rho_w$ = density of sea water . $d_{mix}$ = depth of mixed layer . $F$ = net atmospheric heat flux . $ Delta T_c$ = climatology temperature correction . The only free parameter in this eqaution is the mixed layer depth, which was chosen to be 50 meters for all points. This value is roughly the global mean vlaue for the mixed layer depth as was determinded from the observations by Levitus (1982). . Redness of the SST anomalies . The standard deviation of the SST anoamlies do not aloine describe the large-scale character of the SST varaiblity. An important feature of the SSt variability is the increase of the variance in the SST power spectra with period, which is the so called redness of the spectra. If the SST anomalies follow an AR(1)-process than the redness can be estimated by the lag-1 correlation. . $C( omega) = frac{ sigma^2}{(1- alpha)^2+ omega^2}$ . $ sigma$ = standard deviation . $ omega$ = frequency . $ alpha$ = lag-1 correlation based on monthly mean time series . The increase of $C( omega)$ is only a function of $ alpha$, hence the redness $Q_{red}$ can be defined as . $Q_{red}$ = $ frac{1}{(1- alpha)^2}$ . Conclusions . fully coupled models are signifcantly different in terms of large-scale features of the SST variability than slab ocean models | only slab ocean models can be regarded as an AR(1) process | The diference between the AR(1)-process and the SST spectra in the simulations with fully dynamical ocean models is characterized by a slower increase of the SST variance from the shorter time periods to the longer time periods, which leads to increased variance of the SST on the seasonal and the decadal time scale relative to the tted AR(1)-process AMO and AMOC. . Simple red noise null hypothesis . c1 = 1 c2 = 0.86 c3 = 0.01 f, ax = plt.subplots(3, figsize = (12,4)) ax = ax.ravel() for realisation in range(0,3): red_noise_sequence1 = np.zeros((len(white_noise_sequence))) red_noise_sequence2 = np.zeros((len(white_noise_sequence))) red_noise_sequence3 = np.zeros((len(white_noise_sequence))) white_noise_sequence = np.random.normal(0, 1, 1000) for i in range(1, len(white_noise_sequence)): red_noise_sequence1[i] = c1 * red_noise_sequence1[i-1] + white_noise_sequence[i] red_noise_sequence2[i] = c2 * red_noise_sequence2[i-1] + white_noise_sequence[i] red_noise_sequence3[i] = c3 * red_noise_sequence3[i-1] + white_noise_sequence[i] ax[0].plot(red_noise_sequence1) ax[1].plot(red_noise_sequence2) ax[2].plot(red_noise_sequence3) .",
            "url": "https://florianboergel.github.io/personal_blog/jupyter/2020/02/20/red_noise.html",
            "relUrl": "/jupyter/2020/02/20/red_noise.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Finished my PhD",
            "content": "Introduction . Those who do not move, do not notice their chains. Rosa Luxemburg . What drives our climate system? Ultimately, the main driver of the climate system is the sun. Climate variations can be caused by external forcing such as changes in the solar radiation, volcanic eruptions, or greenhouse gas emissions. Changes in the climate system may also result from internal interactions between the components of the climate system itself, such as the atmosphere and the ocean. The Earth’s climate system is never in equilibrium. There is a constant exchange of mass, momentum, and energy between all of its components. Although many processes are non-linear, these interactions are predictable to a certain degree (Libardoni et al., 2019). Understanding the key mechanisms of natural climate variations is essential to further improve predictions of changes in the earth system. However, understanding internal variability and its influence on climate is challenging. While the response time of the atmosphere is relatively fast, ranging from days to weeks, the response of the ocean is much slower due to the large heat capacity of the ocean (IPCC, 2013). Long time scales make it even more difficult to understand changes in the climate, since measurement data are only available to a limited extent. A common approach to deal with the problem of undersampling is to use numerical models. The ability of global climate models (GCMs) to simulate historical climate change, regional modes of variability, and variations on different time scales has improved immensely over the past years. Still, even the most advanced GCMs have their limitations when it comes to confident statements of future climate projections (IPCC, 2013). Besides GCMs, regional climate models (RCM) play a particularly important role. They cover a smaller area and can have a higher spatial resolution, which allows to analyze climate variability on a regional scale that is not captured by the GCM. However, the quality of the projection is still determined by the GCM, since RCMs are driven by GCMs. Coastal seas such as the Baltic Sea are among the most socioeconomically used areas on the planet. They are under the permanent influence of both anthropogenic pressure and natural climate variability. The Baltic Sea is a very prominent example for coastal seas since it responds very sensitively to external forcing. Therefore, the Baltic Sea can be viewed as a laboratory to analyze the impact of internal variability on its ecosystem which then could be projected onto other coastal seas (Reusch et al., 2018). The most important climate mode for the climate of the Baltic Sea is the North Atlantic Oscillation (NAO). Therefore, studies about the climate of the Baltic Sea often only consider the impact of the NAO. However, the impact of another important climate mode in the Northern Hemisphere – the Atlantic Multidecadal Oscillation (AMO) – is neglected, since its impact is mostly relevant on multidecadal time scales. Up to this point no study has been able to show whether a teleconnection between the AMO and the Baltic Sea region exists. Therefore, this work aims at analyzing the impact of the AMO on the Baltic Sea region, using global and regional climate models. In a second step the interaction between two of the most dominant climate modes in the Northern Hemisphere, the NAO and the AMO, is analyzed. Can the state of the AMO alter the spatial position of the NAO, moving its centers towards Europe? And does the position of the NAO centers affect the NAO’s regional importance for the Baltic Sea? Although the AMO is a mode of natural climate variability, a better understanding helps to grasp how it affected the climate of the past. This allows to assess its future impact on anthropogenic climate change. This means understanding the AMO’s spatial and temporal pattern will provide information about whether it will amplify or dampen anthropogenic climate change in the coming decades. Finally, this all leads to the question:What is the roleof the AMO for the climate of Northern Europe and especially for the Baltic Sea? The AMO fluctuates on multidecadal time scales. Therefore, trend estimates shorter than a full AMO cycle are likely biased by this multidecadal climate mode. In the following the reader will be introduced to modes of climate variability with a focus on both climate modes that are analyzed in this work – the NAO and the AMO. Then a brief overview over the characteristics of the Baltic Sea is given. Following, the data used and a description of the relevant methods is summarized in the chapter ’Data &amp; Methods’. In chapter 4, the three publications and their main results are presented. Finally, the significance of these results for regional climate research and especially the Baltic Sea region is discussed. . Modes of climate variability . &quot;Why quantum mechanics? And why turbulence? - Werner Heisenberg&quot; . Atmosphere, ocean, cryosphere, and continental hydrology exchange mass, momentum, and energy causing fluctuations in global- or regional-scale climate variables, such as sea surface temperature (SST), precipitation, and sea surface pressure (de Viron et al., 2013). Time scales of these fluctuations vary from days to centennials and can be summarized as modes of climate variability. Identifying climate modes helps to understand our climate system. They simplify high-dimensional systems and provide a better predictive capacity (Wang and Schimel, 2003). According to the World Meteorological Organization the average weather, better known as climate, is defined as periods longer than 30 years. Hence, the term climate variability aims at explaining variations in the mean state and other statistics of the climate ”on all spatial and temporal scales beyond that of individual weather events” (IPCC, 2013). Examples of climate variability can be found throughout time:During the last 500,000 years there were only fourfull glacial cycles, caused by changes to the Earth’s orbital parameters. The last glacial period (115,000 BP - 11,700 BP) was characterized by strong temperature variations while the past 10,000 years have seen more constant temperatures. The past 1,000 years were dominated by a warm period from the 11th to the 13th century, followed by a cold period from the 16th to the 19th century. These periods are commonly known as the Medieval Climate Anomaly (MCA) and the Little Ice Age (LIA; Mann et al., 2009). Regional patterns of climate are typically much more variable than global climate, and the involved time scales are shorter. Regional climate modes are found by decomposing the spatio-temporal variability of the atmosphere or the ocean into spatial patterns that change in magnitude over time. While some modes affect the climate of large parts of the Earth, others have smaller-scale effects, affecting only local climate conditions. It is striking how some climate modes affect the weather halfway across the globe. These long-distance effects are called teleconnections. The most prominent climate mode, the so called El Nineo / Southern Oscillation (ENSO), is associated with SST changes in the central equatorial Pacific Ocean. It affects weather all over the globe from Peru to North America and from Australia to east Africa. If climate modes and their teleconnections are interpreted correctly, the predictability of regional climate conditions can be increased. However, one difficulty regarding reliable predictions is that the temporal variability of a climate mode can change stochastically. Further, the effect of one climate mode can be either compensated for or enhanced by another climate mode. Another difficulty is that the temporal variability of climate modes can be affected by the interaction between two modes. Therefore, when studying regional climate, it is necessary to understand how relevant climate modes interact. In the following, two dominant modes of the climate of the Northern Hemisphere are introduced; First, the North Atlantic Oscillation (NAO) and second, the Atlantic Multidecadal Oscillation (AMO). In addition, current research results on how they influence European climate and the Baltic Sea region are discussed. . North Atlantic Oscillation . During winter the most dominant and recurrent mode of climate variability in the Northern Hemisphere (NH) is the NAO. The NAO is primarily an atmospheric phenomenon and is characterized by a sea level pressure (SLP) difference between the subpolar low-pressure system near Iceland (Icelandic Low) and the subtropical anticyclone in the Atlantic near the Azores (Azores High; Hurrell et al., 2003). The spatial pattern of the NAO is shown in Fig5 ure 2.1. It can be seen that in the case of ECHO-G the NAO accounts for 38.17 % of the SLP variability in the model domain. There are several ways to define the NAO. One way is the winter SLP difference between Lisbon and Reykjavik (e.g. Jones et al., 1997). A more advanced approach is the Empirical Orthogonal Function (EOF) analysis (see Figure 2.1). A detailed description of this method is given in chapter 4. The underlying idea of this linear concept is to find atmospheric patterns that fluctuate between positive and negative states, which applies to the NAO. . def is_djf(month): return (month &gt;= 12) | (month &lt;= 2) baseurl = &quot;https://psl.noaa.gov/thredds/dodsC/Datasets/ncep.reanalysis/pressure/air.&quot; datalist = [baseurl+str(year)+&quot;.nc&quot; for year in range(1962, 1970)] ds = xr.open_mfdataset(datalist, combine=&#39;by_coords&#39;).isel(level = 0).sel(lon=) ds_djf = ds.resample(time = &quot;1m&quot;).mean() ds_djf = ds_djf.sel(time = is_djf(ds_djf[&#39;time.month&#39;])) . ds . Show/Hide data repr . . . Show/Hide attributes . . . . xarray.DatasetDimensions:lat: 73 | lon: 144 | time: 11688 | . | Coordinates: (4)level()float321000.0units :millibaractual_range :[1000. 10.]long_name :Levelpositive :downGRIB_id :100GRIB_name :hPaaxis :Zarray(1000., dtype=float32) . | lat(lat)float3290.0 87.5 85.0 ... -87.5 -90.0units :degrees_northactual_range :[ 90. -90.]long_name :Latitudestandard_name :latitudeaxis :Yarray([ 90. , 87.5, 85. , 82.5, 80. , 77.5, 75. , 72.5, 70. , 67.5, 65. , 62.5, 60. , 57.5, 55. , 52.5, 50. , 47.5, 45. , 42.5, 40. , 37.5, 35. , 32.5, 30. , 27.5, 25. , 22.5, 20. , 17.5, 15. , 12.5, 10. , 7.5, 5. , 2.5, 0. , -2.5, -5. , -7.5, -10. , -12.5, -15. , -17.5, -20. , -22.5, -25. , -27.5, -30. , -32.5, -35. , -37.5, -40. , -42.5, -45. , -47.5, -50. , -52.5, -55. , -57.5, -60. , -62.5, -65. , -67.5, -70. , -72.5, -75. , -77.5, -80. , -82.5, -85. , -87.5, -90. ], dtype=float32) . | lon(lon)float320.0 2.5 5.0 ... 352.5 355.0 357.5units :degrees_eastlong_name :Longitudeactual_range :[ 0. 357.5]standard_name :longitudeaxis :Xarray([ 0. , 2.5, 5. , 7.5, 10. , 12.5, 15. , 17.5, 20. , 22.5, 25. , 27.5, 30. , 32.5, 35. , 37.5, 40. , 42.5, 45. , 47.5, 50. , 52.5, 55. , 57.5, 60. , 62.5, 65. , 67.5, 70. , 72.5, 75. , 77.5, 80. , 82.5, 85. , 87.5, 90. , 92.5, 95. , 97.5, 100. , 102.5, 105. , 107.5, 110. , 112.5, 115. , 117.5, 120. , 122.5, 125. , 127.5, 130. , 132.5, 135. , 137.5, 140. , 142.5, 145. , 147.5, 150. , 152.5, 155. , 157.5, 160. , 162.5, 165. , 167.5, 170. , 172.5, 175. , 177.5, 180. , 182.5, 185. , 187.5, 190. , 192.5, 195. , 197.5, 200. , 202.5, 205. , 207.5, 210. , 212.5, 215. , 217.5, 220. , 222.5, 225. , 227.5, 230. , 232.5, 235. , 237.5, 240. , 242.5, 245. , 247.5, 250. , 252.5, 255. , 257.5, 260. , 262.5, 265. , 267.5, 270. , 272.5, 275. , 277.5, 280. , 282.5, 285. , 287.5, 290. , 292.5, 295. , 297.5, 300. , 302.5, 305. , 307.5, 310. , 312.5, 315. , 317.5, 320. , 322.5, 325. , 327.5, 330. , 332.5, 335. , 337.5, 340. , 342.5, 345. , 347.5, 350. , 352.5, 355. , 357.5], dtype=float32) . | time(time)datetime64[ns]1962-01-01 ... 1969-12-31T18:00:00long_name :Timedelta_t :0000-00-00 06:00:00standard_name :timeaxis :T_ChunkSizes :1array([&amp;#x27;1962-01-01T00:00:00.000000000&amp;#x27;, &amp;#x27;1962-01-01T06:00:00.000000000&amp;#x27;, &amp;#x27;1962-01-01T12:00:00.000000000&amp;#x27;, ..., &amp;#x27;1969-12-31T06:00:00.000000000&amp;#x27;, &amp;#x27;1969-12-31T12:00:00.000000000&amp;#x27;, &amp;#x27;1969-12-31T18:00:00.000000000&amp;#x27;], dtype=&amp;#x27;datetime64[ns]&amp;#x27;) . | . | Data variables: (1)air(time, lat, lon)float32dask.array&lt;chunksize=(1460, 73, 144), meta=np.ndarray&gt;long_name :4xDaily Air temperatureunits :degKprecision :2GRIB_id :11GRIB_name :TMPvar_desc :Air temperaturelevel_desc :Multiple levelsstatistic :Individual Obsparent_stat :Otheractual_range :[167.20001 324.5 ]valid_range :[150. 350.]dataset :NCEP Reanalysis_ChunkSizes :[ 1 1 73 144] | Array Chunk . Bytes 491.46 MB | 61.56 MB | . Shape (11688, 73, 144) | (1464, 73, 144) | . Count 32 Tasks | 8 Chunks | . Type float32 | numpy.ndarray | . | 144 73 11688 | . . | . | Attributes: (8)Conventions :COARDStitle :4x daily NMC reanalysis (1962)description :Data is from NMC initialized reanalysis (4x/day). It consists of most variables interpolated to pressure surfaces from model (sigma) surfaces.platform :Modelhistory :created 97/10/04 by Hoop (netCDF2.3) Converted to chunked, deflated non-packed NetCDF4 2014/09dataset_title :NCEP-NCAR Reanalysis 1References :http://www.psl.noaa.gov/data/gridded/data.ncep.reanalysis.htmlDODS_EXTRA.Unlimited_Dimension :time | . ds_djf[&#39;slp_anom&#39;] = ds_djf.air - ds_djf.air.mean(&quot;time&quot;) coslat = np.cos(np.deg2rad(ds_djf.lat.values)).clip(0., 1.) wgts = np.sqrt(coslat)[..., np.newaxis] solver = Eof(ds_djf.slp_anom.values) eof1 = solver.eofsAsCovariance(neofs=1, pcscaling=1).squeeze() eof2 = solver.eofsAsCovariance(neofs=1, pcscaling=1).squeeze() . plt.pcolor(eof1) . &lt;matplotlib.collections.PolyCollection at 0x7f0ccc419df0&gt; . import seaborn as sns cmap = sns.diverging_palette(220, 20, n=7, as_cmap=True) f = plt.figure() extent = [ds.lon.min(), ds.lon.max(), ds.lat.min(), ds.lat.max()] ax = plt.axes(projection=ccrs.PlateCarree()) ax.set_extent(extent) #ax.gridlines() ax.coastlines(resolution=&#39;50m&#39;) levels = np.linspace(eof1.min(), eof1.max(), 10) im = ax.contourf(ds.lon, ds.lat, eof1, transform=ccrs.PlateCarree(), cmap=plt.cm.RdBu, levels = levels) ts = ax.contour(ds.lon, ds.lat, eof1, transform=ccrs.PlateCarree(), colors=&#39;black&#39;, levels = levels, linestyles=&#39;--&#39;, linewidths=0.5) plt.xlabel(&quot;Longitude&quot;) plt.ylabel(&quot;Latitude&quot;) plt.text(0.1, 0.1,&quot; Variance explained: 38.17%&quot;, fontsize=18, horizontalalignment=&#39;left&#39;, verticalalignment=&#39;center&#39;, transform = f.transFigure) ax.set_extent([ds.lon.min(),ds.lon.max(),ds.lat.min(),84]) gl = ax.gridlines(crs=ccrs.PlateCarree(), draw_labels=True, linewidth=0.5, color=&#39;gray&#39;, alpha=0.5, linestyle=&#39;--&#39;) gl.xlabels_top = False gl.ylabels_left = True gl.ylabels_right = False gl.xlines = True gl.ylines = True gl.xlocator = mticker.FixedLocator([-80, -60, -40, -20, 0, 20]) gl.xformatter = LONGITUDE_FORMATTER gl.yformatter = LATITUDE_FORMATTER gl.xlabel_style = {&#39;size&#39;: 12, &#39;color&#39;: &#39;black&#39;} gl.ylabel_style = {&#39;size&#39;: 12, &#39;color&#39;: &#39;black&#39;} plt.clabel(ts, levels, fontsize=14, inline=1, colors=&quot;black&quot;) ax.set_title(&quot;&quot;) #plt.colorbar(im) f.subplots_adjust(left=None, bottom=0.2, right=None, top=None, wspace=None, hspace=None) ax.set_aspect(&quot;auto&quot;) . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://florianboergel.github.io/personal_blog/jupyter/2020/02/20/phd.html",
            "relUrl": "/jupyter/2020/02/20/phd.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://florianboergel.github.io/personal_blog/jupyter/2020/02/20/orig.html",
            "relUrl": "/jupyter/2020/02/20/orig.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://florianboergel.github.io/personal_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://florianboergel.github.io/personal_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://florianboergel.github.io/personal_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}